REPL:
  在终端以node命令进入node模式。
  下划线 _ 变量：可以获取表达式的结果，如：
	node
	var x=9; var y=5;
	x+y
	var sum=_
	console.log(sum);	//14  
  命令：ctrl+c   退出当前终端
	ctrl+c两次  退出Node REPL
	ctrl+d   退出Node REPL
	向上/向下  查看输入历史命令
	tab键	列出当前命令
	.help   列出可使用命令
	.break  退出多行表达式
	.clear  退出多行表达式
	.sava filename  保存当前的Node REPL会话到指定文件
	.load filename  载入当前的Node REPL会话的文件内容
fs文件系统模块：path模块，学习： http://www.jianshu.com/p/5683c8a93511  示例：mainfs.js

事件循环：有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)
  1.通过events模块的EventEmitter()创建事件对象， var eventEmitter=new events.EventEmitter();
  2.用on绑定事件处理程序， eventEmitter.on('事件名',[callback])
  3.用emit触发事件，   eventEmitter.emit('事件名')
Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件， 一个fs.readStream对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例
事件的异步：EventListener 会按照监听器注册的顺序同步地调用所有监听器。 所以需要确保事件的正确排序且避免竞争条件或逻辑错误。 监听器函数可以使用 setImmediate() 或 process.nextTick() 方法切换到异步操作模式

node模块系统：
1.require的加载优先级：1.先看是否在模块缓存区中 --是(---导出)否--->2.是否是原生模块--是(查找原生模块--缓存--导出)--否-->3.查找文件--根据扩展名载入模块--缓存--导出
2.模块导出：module.exports=Hello;
  


